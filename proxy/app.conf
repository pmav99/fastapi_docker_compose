# vim: set ft=nginx:

upstream web_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response

  # for UNIX domain socket setups
  #server unix:/tmp/gunicorn.sock fail_timeout=0;

  # for a TCP configuration
  server web:8000 fail_timeout=0;
}

server {
  # if no Host match, close the connection to prevent host spoofing
  listen 0.0.0.0:80 default_server;
  return 444;

  # Remember to log all actions (set up access and error log):
  access_log  /var/log/nginx/default-access.log   main;
  error_log   /var/log/nginx/default-error.log    warn;
}

server {
  # use 'listen 80 deferred;' for Linux
  # use 'listen 80 accept_filter=httpready;' for FreeBSD
  listen 0.0.0.0:80 deferred;
  client_max_body_size 4G;

  # set the correct host(s) for your site
  server_name $hostname
              localhost
              ;

  keepalive_timeout 5;

  # path for static files
  #root /path/to/app/current/public;

  # Enable gzip for proxied requests and static files
  # https://reinout.vanrees.org/weblog/2015/11/19/nginx-proxy-gzip.html
  # https://chirale.org/2015/09/18/how-to-enable-gzip-on-proxy-servers-on-nginx/
  gzip on;
  gzip_proxied any;
  gzip_comp_level 2;
  gzip_vary on;
  gzip_http_version 1.0;
  gzip_types application/javascript
              application/json
              application/xml
              text/css
              text/plain
              text/xml
              ;

  location / {
    # checks for static file, if not found proxy to app
    try_files $uri @proxy_to_app;
  }

  location @proxy_to_app {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Host $http_host;
    # we don't want nginx trying to do something clever with
    # redirects, we set the Host: header above already.
    proxy_redirect off;
    proxy_pass http://web_server;
  }

  #error_page 500 502 503 504 /500.html;
  #location = /500.html {
    #root /path/to/app/current/public;
  #}
}
